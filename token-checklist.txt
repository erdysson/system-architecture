ID TOKEN

- carries personal info about end user that authenticates.
- contains claims data about user as saved  with the auth server
- has jwt format
- payload contains "auth_time", "iss", "aud", and "sub"
- used to retrieve user's basic info like name, dob, email, phone, which is present in db.
** validate before using!

{
  "iss": "http://YOUR_DOMAIN/",
  "sub": "user_id",
  "aud": "app_identifier",
  "exp": 1311281970,
  "iat": 1311280970,
  "name": "Jane Doe",
  "given_name": "Jane",
  "family_name": "Doe",
  "gender": "female",
  "birthdate": "0000-10-31",
  "email": "janedoe@example.com",
  "picture": "http://example.com/janedoe/me.jpg"
}

ACCESS TOKEN

- use to protect resources
- used as bearer token
- has a short lifespan
- never used for authentication. they can not tell if the user is authenticated
- only user info the token processes user id, located in "sub" claims.
- should be obtained after successful authentication process. In jwt format
- token does not contain any info about user except for id
- contains authorization info about which actions allowed to perform in api "scope".
- it is for securing a resource, not authenticating the user

{
  "iss": "https://YOUR_DOMAIN/",
  "sub": "user_id",
  "aud": [
    "my-api-identifier",
    "https://YOUR_DOMAIN/userinfo"
  ],
  "azp": "YOUR_CLIENT_ID",
  "exp": 1489179954,
  "iat": 1489143954,
  "scope": "role"
}

REFRESH TOKEN

- longer lifespan compared to access token
- used to request a new access token
- credentials used to obtain access token
- allowed for long-lived access and highly confidential
- never sent to a resource, only sent to auth servers
- should be in an encoded format and can not be decoded